{"version":3,"sources":["../../test/span_context.js"],"names":["constants","describe","LARGEST_64_BUFFER","before","Buffer","writeUInt32BE","it","traceId","Utils","encodeInt64","spanId","parentId","flags","context","SpanContext","withBinaryIds","assert","deepEqual","equal","concat","traceIdStr","isOk","isSampled","isDebug","_flags","isNotOk","ctx1","toString","ctx2","ctx3","spanIdStr","parentIdStr","fromString"],"mappings":"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","file":"span_context.js","sourcesContent":["// Copyright (c) 2016 Uber Technologies, Inc.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except\n// in compliance with the License. You may obtain a copy of the License at\n//\n// http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software distributed under the License\n// is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express\n// or implied. See the License for the specific language governing permissions and limitations under\n// the License.\n\nimport { assert } from 'chai';\nimport * as constants from '../src/constants.js';\nimport SpanContext from '../src/span_context.js';\nimport Utils from '../src/util.js';\n\ndescribe('SpanContext should', () => {\n  let LARGEST_64_BUFFER;\n  before(() => {\n    LARGEST_64_BUFFER = new Buffer(8);\n    LARGEST_64_BUFFER.writeUInt32BE(0xffffffff, 0);\n    LARGEST_64_BUFFER.writeUInt32BE(0xffffffff, 4);\n  });\n\n  it('return given values as they were set', () => {\n    let traceId = Utils.encodeInt64(1);\n    let spanId = Utils.encodeInt64(2);\n    let parentId = Utils.encodeInt64(3);\n    let flags = 1;\n\n    let context = SpanContext.withBinaryIds(traceId, spanId, parentId, flags);\n\n    assert.deepEqual(traceId, context.traceId);\n    assert.deepEqual(spanId, context.spanId);\n    assert.deepEqual(parentId, context.parentId);\n    assert.equal(flags, context.flags);\n  });\n\n  it('return given values as they were set 128 bit', () => {\n    let traceId = Buffer.concat([Utils.encodeInt64(2), Utils.encodeInt64(1)]);\n    let spanId = Utils.encodeInt64(3);\n    let parentId = Utils.encodeInt64(4);\n    let flags = 1;\n\n    let context = SpanContext.withBinaryIds(traceId, spanId, parentId, flags);\n\n    assert.deepEqual(traceId, context.traceId);\n    assert.deepEqual('20000000000000001', context.traceIdStr);\n    assert.deepEqual(spanId, context.spanId);\n    assert.deepEqual(parentId, context.parentId);\n    assert.equal(flags, context.flags);\n  });\n\n  it('return IsSampled properly', () => {\n    let context = SpanContext.withBinaryIds(\n      Utils.encodeInt64(1),\n      Utils.encodeInt64(2),\n      Utils.encodeInt64(3),\n      3\n    );\n    assert.isOk(context.isSampled());\n    assert.isOk(context.isDebug());\n\n    context._flags = 0;\n    assert.isNotOk(context.isSampled());\n    assert.isNotOk(context.isDebug());\n  });\n\n  it('format strings properly with toString', () => {\n    let ctx1 = SpanContext.withBinaryIds(Utils.encodeInt64(0x100), Utils.encodeInt64(0x7f), null, 1);\n    assert.equal(ctx1.toString(), '100:7f:0:1');\n\n    let ctx2 = SpanContext.withBinaryIds(\n      Utils.encodeInt64(255 << 4),\n      Utils.encodeInt64(127),\n      Utils.encodeInt64(256),\n      0\n    );\n    assert.equal(ctx2.toString(), 'ff0:7f:100:0');\n\n    // test large numbers\n    let ctx3 = SpanContext.withBinaryIds(LARGEST_64_BUFFER, LARGEST_64_BUFFER, LARGEST_64_BUFFER, 0);\n    assert.equal(ctx3.toString(), 'ffffffffffffffff:ffffffffffffffff:ffffffffffffffff:0');\n    assert.equal('ffffffffffffffff', ctx3.traceIdStr);\n    assert.equal('ffffffffffffffff', ctx3.spanIdStr);\n    assert.equal('ffffffffffffffff', ctx3.parentIdStr);\n  });\n\n  it('turn properly formatted strings into correct span contexts', () => {\n    let context = SpanContext.fromString('100:7f:0:1');\n\n    assert.deepEqual('100', context.traceIdStr);\n    assert.deepEqual(Utils.encodeInt64(0x100), context.traceId);\n    assert.deepEqual(Utils.encodeInt64(0x7f), context.spanId);\n    assert.equal(null, context.parentId);\n    assert.equal(1, context.flags);\n\n    // test large numbers\n    context = SpanContext.fromString('ffffffffffffffff:ffffffffffffffff:5:1');\n    assert.equal('ffffffffffffffff', context.traceIdStr);\n    assert.equal('ffffffffffffffff', context.spanIdStr);\n    assert.deepEqual(LARGEST_64_BUFFER, context.spanId);\n    assert.deepEqual(LARGEST_64_BUFFER, context.spanId);\n    assert.deepEqual(Utils.encodeInt64(0x5), context.parentId);\n    assert.equal(context.flags, 0x1);\n  });\n\n  it('turn properly formatted strings into correct span contexts 128 bit', () => {\n    let context = SpanContext.fromString('20000000000000100:7f:0:1');\n\n    assert.deepEqual('20000000000000100', context.traceIdStr);\n    assert.deepEqual(Buffer.concat([Utils.encodeInt64(0x2), Utils.encodeInt64(0x100)]), context.traceId);\n    assert.deepEqual(Utils.encodeInt64(0x7f), context.spanId);\n    assert.equal(null, context.parentId);\n    assert.equal(1, context.flags);\n\n    // test large numbers\n    context = SpanContext.fromString('ffffffffffffffffffffffffffffffff:ffffffffffffffff:5:1');\n    assert.equal('ffffffffffffffffffffffffffffffff', context.traceIdStr);\n    assert.equal('ffffffffffffffff', context.spanIdStr);\n    assert.deepEqual(Buffer.concat([LARGEST_64_BUFFER, LARGEST_64_BUFFER]), context.traceId);\n    assert.deepEqual(LARGEST_64_BUFFER, context.spanId);\n    assert.deepEqual(Utils.encodeInt64(0x5), context.parentId);\n    assert.equal(context.flags, 0x1);\n  });\n\n  it('return null on malformed traces', () => {\n    assert.equal(SpanContext.fromString('bad value'), null);\n    assert.equal(SpanContext.fromString('1:1:1:1:1'), null, 'Too many colons');\n    assert.equal(SpanContext.fromString('1:1:1'), null, 'Too few colons');\n    assert.equal(SpanContext.fromString('x:1:1:1'), null, 'Not all numbers');\n    assert.equal(SpanContext.fromString('1:x:1:1'), null, 'Not all numbers');\n    assert.equal(SpanContext.fromString('1:1:x:1'), null, 'Not all numbers');\n    assert.equal(SpanContext.fromString('1:1:1:x'), null, 'Not all numbers');\n    assert.equal(SpanContext.fromString('0:1:1:1'), null, 'Trace ID cannot be zero');\n  });\n});\n"]}